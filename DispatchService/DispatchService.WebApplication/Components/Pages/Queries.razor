@page "/queries"
@inject HttpClient Http
@inject ISnackbar Snackbar

<h2>Queries</h2>

<MudExpansionPanels MultiExpansion="true">
    <!-- Query 1 -->
    <MudExpansionPanel Text="Query 1: Display all drivers who made trips during a given period, sorted by full name.">
        <div class="input-container">
            <div class="mb-3">
                <MudDatePicker id="startDate" Label="Start Date" @bind-Date="_startDate" Editable="true" />
            </div>
            <div class="mb-3">
                <MudTimePicker id="startTime" Label="Start Time" @bind-Time="_startTime" Editable="true" />
            </div>
            <div class="mb-3">
                <MudDatePicker id="endDate" Label="End Date" @bind-Date="_endDate" Editable="true" />
            </div>
            <div class="mb-3">
                <MudTimePicker id="endTime" Label="End Time" @bind-Time="_endTime" Editable="true" />
            </div>
        </div>
        <div class="button-container">
            <MudButton Color="MudBlazor.Color.Primary" OnClick="@(() => ClickHandler(1))">Get result</MudButton>
            <MudButton Color="MudBlazor.Color.Error" OnClick="@(() => ClearTask(1))">Clear</MudButton>
        </div>
        <div class="table-container">
            @if (query1 != null && query1.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Full Name</th>
                            <th>Driver License</th>
                            <th>Passport</th>
                            <th>Address</th>
                            <th>Phone Number</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var driver in query1)
                        {
                            <tr>
                                <td>@driver.Id</td>
                                <td>@driver.FullName</td>
                                <td>@driver.DriverLicense</td>
                                <td>@driver.Passport</td>
                                <td>@driver.Address</td>
                                <td>@driver.PhoneNumber</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="no-data">No data available.</p>
            }
        </div>
    </MudExpansionPanel>

    <!-- Query 2 -->
    <MudExpansionPanel Text="Query 2: Display the top drivers by number of trips.">
        <div class="button-container">
            <MudButton Color="MudBlazor.Color.Primary" OnClick="@(() => ClickHandler(2))">Get result</MudButton>
            <MudButton Color="MudBlazor.Color.Error" OnClick="@(() => ClearTask(2))">Clear</MudButton>
        </div>
        <div class="table-container">
            @if (query2 != null)
            {
                <table class="table">
                <thead>
                    <tr>
                        <th>Driver ID</th>
                        <th>Full Name</th>
                        <th>Trips</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var driver in query2)
                    {
                        <tr>
                            <td>@(driver.Driver?.Id.ToString() ?? "N/A")</td>
                            <td>@(driver.Driver?.FullName ?? "N/A")</td>
                            <td>@driver.TripCount</td>
                        </tr>
                    }
                </tbody>
                </table>
            }
            else
            {
                <p class="no-data">No data available.</p>
            }
        </div>
    </MudExpansionPanel>

    <!-- Query 3 -->
    <MudExpansionPanel Text="Query 3: Display information for each driver.">
        <div class="button-container">
            <MudButton Color="MudBlazor.Color.Primary" OnClick="@(() => ClickHandler(3))">Get result</MudButton>
            <MudButton Color="MudBlazor.Color.Error" OnClick="@(() => ClearTask(3))">Clear</MudButton>
        </div>
        <div class="table-container">
            @if (query3 != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Driver ID</th>
                            <th>Full Name</th>
                            <th>Total Trips</th>
                            <th>Average Trips Time</th>
                            <th>Max Trips Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in query3)
                        {
                            <tr>
                                <td>@(stat.Driver?.Id.ToString() ?? "N/A")</td>
                                <td>@(stat.Driver?.FullName ?? "N/A")</td>
                                <td>@stat.TripCount</td>
                                <td>@stat.AvgTripTime</td>
                                <td>@stat.MaxTripTime</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="no-data">No data available.</p>
            }
        </div>
    </MudExpansionPanel>

    <!-- Query 4 -->
    <MudExpansionPanel Text="Query 4: Display the total travel time of vehicles of each type and model.">
        <div class="button-container">
            <MudButton Color="MudBlazor.Color.Primary" OnClick="@(() => ClickHandler(4))">Get result</MudButton>
            <MudButton Color="MudBlazor.Color.Error" OnClick="@(() => ClearTask(4))">Clear</MudButton>
        </div>
        <div class="table-container">
            @if (query4 != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Model Name</th>
                            <th>Total Trip Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transport in query4)
                        {
                            <tr>
                                <td>@transport.Type.ToString()</td>
                                <td>@transport.ModelName</td>
                                <td>@transport.TotalTripTime</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="no-data">No data available.</p>
            }
        </div>
    </MudExpansionPanel>

    <!-- Query 5 -->
    <MudExpansionPanel Text="Query 5: Display information about the vehicles that have made the maximum number of trips during the specified period.">
        <div class="input-container">
            <div class="mb-3">
                <MudDatePicker id="startDate" Label="Start Date" @bind-Date="_startDate" Editable="true" />
            </div>
            <div class="mb-3">
                <MudTimePicker id="startTime" Label="Start Time" @bind-Time="_startTime" Editable="true" />
            </div>
            <div class="mb-3">
                <MudDatePicker id="endDate" Label="End Date" @bind-Date="_endDate" Editable="true" />
            </div>
            <div class="mb-3">
                <MudTimePicker id="endTime" Label="End Time" @bind-Time="_endTime" Editable="true" />
            </div>
        </div>
        <div class="button-container">
            <MudButton Color="MudBlazor.Color.Primary" OnClick="@(() => ClickHandler(5))">Get result</MudButton>
            <MudButton Color="MudBlazor.Color.Error" OnClick="@(() => ClearTask(5))">Clear</MudButton>
        </div>
        <div class="table-container">
            @if (query5 != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Transport ID</th>
                            <th>Model Name</th>
                            <th>Type</th>
                            <th>Trips</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transport in query5)
                        {
                            <tr>
                                <td>@(transport.Transport?.Id.ToString() ?? "N/A")</td>
                                <td>@(transport.Transport?.ModelName ?? "N/A")</td>
                                <td>@(transport.Transport?.Type.ToString() ?? "N/A")</td>
                                <td>@transport.TripCount</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="no-data">No data available.</p>
            }
        </div>
    </MudExpansionPanel>

</MudExpansionPanels>


@code{
    private List<Driver> _drivers = new();
    private List<Transport> _transports = new();
    private List<Route> _routes = new();
    private DateTime? _startDate = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc);
    private DateTime? _endDate = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc);
    private TimeSpan? _startTime = TimeSpan.Zero;
    private TimeSpan? _endTime = TimeSpan.Zero;

    private string routeUrl = "api/Routes";
    private string driverUrl = "api/Drivers";
    private string transportUrl = "api/Transports";

    private List<Driver> query1 = null!;
    private List<DriverTripCountDto> query2 = null!;
    private List<DriverTripStatsDto> query3 = null!;
    private List<TotalTripTimesDto> query4 = null!;
    private List<TransportTripCountDto> query5 = null!;


    private async Task LoadRoutes()
    {
        try
        {
            _routes = await Http.GetFromJsonAsync<List<Route>>(routeUrl) ?? new List<Route>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading routes: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadTransports()
    {
        try
        {
            _transports = await Http.GetFromJsonAsync<List<Transport>>(transportUrl) ?? new List<Transport>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading transports: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadDrivers()
    {
        try
        {
            _drivers = await Http.GetFromJsonAsync<List<Driver>>(driverUrl) ?? new List<Driver>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading drivers: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDrivers();
        await LoadTransports();
        await LoadRoutes();
    }

    private async Task ClickHandler(int taskId)
    {
        try
        {
            switch (taskId)
            {
                case 1:
                    if (_startDate.HasValue && _startTime.HasValue && _endDate.HasValue && _endTime.HasValue)
                    {
                        var timespan = CombineDateTime();
                        if (timespan == null || timespan.Item1 > timespan.Item2)
                        {
                            Console.WriteLine("Start date and time cannot be greater than end date and time.");
                            return;
                        }
                        string startDateTime = Uri.EscapeDataString(timespan.Item1.ToString("o")), endDateTime = Uri.EscapeDataString(timespan.Item2.ToString("o"));

                        var response1 = await Http.GetFromJsonAsync<List<Driver>>("api/Drivers/drivers-in-period?startDate=" + startDateTime + " &endDate=" + endDateTime);
                        if (response1 != null)
                        {
                            query1 = response1;
                        }
                    }
                    break;
                case 2:
                    var response2 = await Http.GetFromJsonAsync<List<DriverTripCountDto>>("api/Drivers/top-drivers");
                    if (response2 != null)
                    {
                        query2 = response2;
                    }
                    break;
                case 3:
                    var response3 = await Http.GetFromJsonAsync<List<DriverTripStatsDto>>("api/Drivers/driver-trip-stats");
                    if (response3 != null)
                    {
                        query3 = response3;
                    }
                    break;
                case 4:
                    var response4 = await Http.GetFromJsonAsync<List<TotalTripTimesDto>>("api/Transports/total-trip-times");
                    if (response4 != null)
                    {
                        query4 = response4;
                    }
                    break;
                case 5:
                    if (_startDate.HasValue && _startTime.HasValue && _endDate.HasValue && _endTime.HasValue)
                    {
                        var timespan = CombineDateTime();
                        if (timespan == null || timespan.Item1 > timespan.Item2)
                        {
                            Console.WriteLine("Start date and time cannot be greater than end date and time.");
                            return;
                        }
                        string startDateTime = Uri.EscapeDataString(timespan.Item1.ToString("o")), endDateTime = Uri.EscapeDataString(timespan.Item2.ToString("o"));

                        var response5 = await Http.GetFromJsonAsync<List<TransportTripCountDto>>("api/Transports/top-transports?startDate=" + startDateTime + " &endDate=" + endDateTime);
                        if (response5 != null)
                        {
                            query5 = response5;
                        }
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void ClearTask(int taskId)
    {
        switch (taskId)
        {
            case 1:
                query1 = null!;
                break;
            case 2:
                query2 = null!;
                break;
            case 3:
                query3 = null!;
                break;
            case 4:
                query4 = null!;
                break;
            case 5:
                query5 = null!;
                break;
        }
    }

    private Tuple<DateTime, DateTime>? CombineDateTime()
    {
        try
        {
            if (_startDate > _endDate || _startTime > _endTime)
            {
                throw new Exception("Error Date");
            }
            DateTime start = DateTime.UtcNow, end = DateTime.UtcNow;

            if (_startDate.HasValue && _startTime.HasValue)
            {
                start = _startDate.Value.Date + _startTime.Value;
                start = DateTime.SpecifyKind(start, DateTimeKind.Utc);
            }
            if (_endDate.HasValue && _endTime.HasValue)
            {
                end = _endDate.Value.Date + _endTime.Value;
                end = DateTime.SpecifyKind(end, DateTimeKind.Utc);
            }
            return new Tuple<DateTime, DateTime>(start, end);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}: Start date is later than end date", Severity.Error);
            return null;
        }
    }
}